You're essentially migrating a **Node.js + EJS + MongoDB** project into **Next.js + MongoDB**, keeping your backend logic, but integrating it into the Next.js full-stack framework.

Next.js supports both **frontend** (React) and **backend** (API routes and server functions), so you won't need a separate Express server in most cases.

---

## ✅ Core Concepts for Migration

### 🧱 1. **Pages become React components**

Your `.ejs` templates become `.jsx` or `.tsx` files inside the `/app` or `/pages` directory.

### 🌐 2. **Routes become file-based**

* `/` → `app/page.jsx`
* `/search/[item]` → `app/search/[item]/page.jsx`
* `/search/[item]/[num]` → `app/search/[item]/[num]/page.jsx`
* `/movies/[id]` → `app/movies/[id]/page.jsx`
* Your POST `/insert/:id` becomes an API route: `app/api/insert/[id]/route.js`

### 🧠 3. **Backend logic is moved to:**

* **API routes** → for database and POST logic (like `insert`)
* **Server-side functions** (`getServerSideProps` or `server components`) → for fetching MongoDB or OMDb data during render

---

## 🛠 Migrating Step-by-Step

---

### 🔌 1. MongoDB Connection (utility)

Move DB logic to `/lib/mongodb.js`:

```js
import { MongoClient, ServerApiVersion } from 'mongodb';

const uri = `mongodb+srv://${process.env.usr}:${process.env.password}@${process.env.url}/?retryWrites=true&w=majority&appName=Cluster0`;

const client = new MongoClient(uri, {
  serverApi: ServerApiVersion.v1,
  tls: true,
  tlsAllowInvalidCertificates: true,
});

export async function getCollection() {
  if (!client.isConnected) await client.connect();
  return client.db('movie-reviews').collection('reviews');
}
```

---

### 🧾 2. `/` Page (`home`)

📄 `app/page.jsx`

```jsx
export default function HomePage() {
  return <div>Welcome to Movie Reviews</div>; // Recreate your home EJS here
}
```

---

### 🔍 3. Search Results Page

📄 `app/search/[item]/[num]/page.jsx`

```jsx
import React from 'react';

async function fetchMovies(query, page) {
  const res = await fetch(`http://www.omdbapi.com/?apikey=${process.env.key}&s=${query}&page=${page}`);
  const data = await res.json();
  return data.Search;
}

export default async function SearchResults({ params }) {
  const { item, num } = params;
  const results = await fetchMovies(item, num || 1);

  return (
    <div>
      <h1>Search Results for "{item}"</h1>
      <ul>
        {results?.map(movie => <li key={movie.imdbID}>{movie.Title}</li>)}
      </ul>
    </div>
  );
}
```

---

### 🎬 4. Movie Detail Page

📄 `app/movies/[id]/page.jsx`

```jsx
import { getCollection } from '@/lib/mongodb';

async function fetchOMDBInfo(id) {
  const res = await fetch(`http://www.omdbapi.com/?apikey=${process.env.key}&i=${id}`);
  return await res.json();
}

export default async function MoviePage({ params }) {
  const { id } = params;
  const collection = await getCollection();
  const dbDoc = await collection.findOne({ _id: id });
  const reviews = dbDoc?.revs || [];
  const omdbInfo = await fetchOMDBInfo(id);

  return (
    <div>
      <h1>{omdbInfo.Title}</h1>
      <p>{omdbInfo.Plot}</p>

      <h2>Reviews:</h2>
      <ul>
        {reviews.map((r, i) => (
          <li key={i}>
            {r.usr} rated {r.rating}/5: {r.review}
          </li>
        ))}
      </ul>

      <form method="POST" action={`/api/insert/${id}`}>
        <input name="usr" placeholder="Your name" />
        <input name="rating" type="number" step="0.5" min="0" max="5" />
        <textarea name="review" placeholder="Write review here" />
        <button type="submit">Submit Review</button>
      </form>
    </div>
  );
}
```

---

### 📥 5. Insert Review API

📄 `app/api/insert/[id]/route.js`

```js
import { getCollection } from '@/lib/mongodb';

export async function POST(req, { params }) {
  const id = params.id;
  const form = await req.formData();
  const doc = {
    usr: form.get('usr'),
    rating: form.get('rating'),
    review: form.get('review')
  };

  const collection = await getCollection();
  await collection.updateOne(
    { _id: id },
    { $push: { revs: doc } },
    { upsert: true }
  );

  return Response.redirect(`/movies/${id}`);
}
```

---

## 🌍 Static, Server, or Client?

* All `page.jsx` files are **server components by default** in `/app`.
* Use `fetch()` directly for OMDb API and Mongo queries.
* Use **Client Components** (`'use client'`) only if you need interactivity or local state.

---

## 🚀 Deployment Notes

* Host on **Vercel** or any Node.js-friendly platform.
* Set your Mongo credentials and OMDb key in `.env.local`.

```env
usr=myMongoUser
password=myMongoPass
url=myCluster.mongodb.net
key=myOMDbAPIKey
```

---

## ✅ Summary of Folder Structure

```
/app
  /search/[item]/[num]/page.jsx
  /movies/[id]/page.jsx
  /api/insert/[id]/route.js
  page.jsx  <-- home
/lib
  mongodb.js
.env.local
```

---

Let me know if you'd like help setting up stateful rating input in React, converting reviews into client-side pagination, or optimizing serverless Mongo access.
